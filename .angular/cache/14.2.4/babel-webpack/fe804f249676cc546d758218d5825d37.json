{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap, of } from 'rxjs';\nimport { DeleteProductErrorAction, DeleteProductSuccessAction, EditProductErrorAction, EditProductSuccessAction, GetAllProductErrorAction, GetAllProductSuccessAction, GetSelectedProductErrorAction, GetSelectedProductSuccessAction, NewProductSuccessAction, ProductsActionTypes, SaveProductErrorAction, SaveProductSuccessAction, SearchProductErrorAction, SearchProductSuccessAction, SelectProductErrorAction, SelectProductSuccessAction, UpdateProductSuccessAction } from './products.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/product.service\";\nexport let ProductsEffects = /*#__PURE__*/(() => {\n  class ProductsEffects {\n    constructor(effectActions, productService) {\n      this.effectActions = effectActions;\n      this.productService = productService;\n      this.getAllProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.GET_ALL_PRODUCT), mergeMap(action => {\n        return this.productService.getProducts().pipe(map(products => new GetAllProductSuccessAction(products)), catchError(err => of(new GetAllProductErrorAction(err.message))));\n      })));\n      /* GET SELECTED PRODUCTS */\n\n      this.getSelectedProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.GET_SELECTED_PRODUCT), mergeMap(action => {\n        return this.productService.getSelectedProducts().pipe(map(products => new GetSelectedProductSuccessAction(products)), catchError(err => of(new GetSelectedProductErrorAction(err.message))));\n      })));\n      /* NEW  PRODUCTS */\n\n      this.NewProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.NEW_PRODUCT), map(() => new NewProductSuccessAction({}))));\n      /* SAVE PRODUCT */\n\n      this.SaveProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.SAVE_PRODUCT), mergeMap(action => {\n        return this.productService.save(action.payload).pipe(map(product => new SaveProductSuccessAction(product)), catchError(err => of(new SaveProductErrorAction(err.message))));\n      })));\n      /* EDIT PRODUCT */\n\n      this.EditProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.EDIT_PRODUCT), mergeMap(action => {\n        return this.productService.getProductById(action.payload).pipe(map(product => new EditProductSuccessAction(product)), catchError(err => of(new EditProductErrorAction(err.message))));\n      })));\n      /* UPDATE PRODUCT */\n\n      this.UpdateProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.UPDATE_PRODUCT), mergeMap(action => {\n        return this.productService.update(action.payload).pipe(map(product => new UpdateProductSuccessAction(product)), catchError(err => of(new EditProductErrorAction(err.message))));\n      })));\n      /*  SEARCH PRODUCTS */\n\n      this.SearchProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.SEARCH_PRODUCT), mergeMap(action => {\n        return this.productService.searchProducts(action.payload).pipe(map(products => new SearchProductSuccessAction(products)), catchError(err => of(new SearchProductErrorAction(err.message))));\n      })));\n      /*  SELECT / UNSELECT PRODUCTS */\n\n      this.SelectProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.SELECT_PRODUCT), mergeMap(action => {\n        return this.productService.setSelected(action.payload).pipe(map(product => new SelectProductSuccessAction(product)), catchError(err => of(new SelectProductErrorAction(err.message))));\n      })));\n      /* DELETE PRODUCTS */\n\n      this.DeleteProductsEffect = createEffect(() => this.effectActions.pipe(ofType(ProductsActionTypes.DELETE_PRODUCT), mergeMap(action => {\n        return this.productService.delete(action.payload.id).pipe(map(() => new DeleteProductSuccessAction(action.payload)), catchError(err => of(new DeleteProductErrorAction(err.message))));\n      })));\n    }\n\n  }\n\n  ProductsEffects.ɵfac = function ProductsEffects_Factory(t) {\n    return new (t || ProductsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n  };\n\n  ProductsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsEffects,\n    factory: ProductsEffects.ɵfac\n  });\n  return ProductsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}